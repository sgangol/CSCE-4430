m####################################################################################################################
[Usage #1: Bash]
####################################################################################################################

sg0440@cse01:~/4430/HW4/02$ bash make.sh

[Starting Compilation]
----------------------
Reading "MicroScala.jflex"
Constructing NFA : 244 states in NFA
Converting NFA to DFA :
....................................................................................................................
118 states before minimization, 113 states in minimized DFA
Old file "MicroScalaLexer.java" saved as "MicroScalaLexer.java~"
Writing code to "MicroScalaLexer.java"

jflex MicroScala.jflex [..OK]

Javac MicroScalaLexer.java [..OK]
javac HW4.java [..OK]

> COMPILATION COMPLETED!!
-----------------------

Running HW4 < Test1.scala

------------
|Scala File|
------------

// Test1.scala

// Compute quotient and remainder by repeated subtraction.

object Test1
{
  def main (args : Array [String]) {
    var q : Int = 0;
    var r : Int = 0;
    var x : Int = 0;
    var y : Int = 0;
    x = 32; y = 5;
    r = x;
    while (r >= y)
    {
      q = q + 1;
      r = r - y;
    }
    println (q);
    println (r);
  }
}


Abstract Syntax Tree for main
-----------------------------

(: (: (: (: (: (= (id x) (intValue 32)) (= (id y) (intValue 5))) (= (id r) (id x))) (while (> (id r) (id y)) (: (= (id q) (+ (id q) (intValue 1))) (= (id r) (- (id r) (id y)))))) (println (id q))) (println (id r)))

Comiplation and Run with Test1.scala completed

Follow following command for other Test cases
$ java HW4 < Test-.scala

sg0440@cse01:~/4430/HW4/02$ java HW4 < Test5.scala




------------
|Scala File|
------------

// Test5.scala

// A simple recursive function on lists.

object Test5 {

  var my_list : List [Int] = Nil;

  def cons_my_list (r : Int) : List [Int] =
  {
    if (r <= 10) {
      my_list = r :: my_list;
      my_list = cons_my_list (r + 1);
    }
    return my_list;
  }

Abstract Syntax Tree for cons_my_list
-------------------------------------

(: (if (<= (id r) (intValue 10)) (: (= (id my_list) (:: (id r) (id my_list))) (= (id my_list) (apply cons_my_list [(+ (id r) (intValue 1))])))) (return (id my_list)))


  def main (args : Array [String])
  {
    var r : Int = 0;
    r = 1;
    my_list = Nil;
    my_list = cons_my_list (r);
    println (my_list . head);
  }

}


Abstract Syntax Tree for main
-----------------------------

(: (: (: (= (id r) (intValue 1)) (= (id my_list) Nil)) (= (id my_list) (apply cons_my_list [(id r)]))) (println (head (id my_list))))




####################################################################################################################
[Usage #2]
####################################################################################################################


sg0440@cse01:~/4430/HW4/02$ jflex MicroScala.jflex
Reading "MicroScala.jflex"
Constructing NFA : 244 states in NFA
Converting NFA to DFA :
....................................................................................................................
118 states before minimization, 113 states in minimized DFA
Old file "MicroScalaLexer.java" saved as "MicroScalaLexer.java~"
Writing code to "MicroScalaLexer.java"
sg0440@cse01:~/4430/HW4/02$ javac MicroScalaLexer.java AbstractSyntaxTree.java
sg0440@cse01:~/4430/HW4/02$ javac HW4.java
sg0440@cse01:~/4430/HW4/02$ java HW4 < Test1.scala

------------
|Scala File|
------------

// Test1.scala

// Compute quotient and remainder by repeated subtraction.

object Test1
{
  def main (args : Array [String]) {
    var q : Int = 0;
    var r : Int = 0;
    var x : Int = 0;
    var y : Int = 0;
    x = 32; y = 5;
    r = x;
    while (r >= y)
    {
      q = q + 1;
      r = r - y;
    }
    println (q);
    println (r);
  }
}


Abstract Syntax Tree for main
-----------------------------

(: (: (: (: (: (= (id x) (intValue 32)) (= (id y) (intValue 5))) (= (id r) (id x))) (while (> (id r) (id y)) (: (= (id q) (+ (id q) (intValue 1))) (= (id r) (- (id r) (id y)))))) (println (id q))) (println (id r)))
